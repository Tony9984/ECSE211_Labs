package ca.mcgill.ecse211.lab1;

import static ca.mcgill.ecse211.lab1.Resources.*;

public class PController extends UltrasonicController {

  private static final int MOTOR_SPEED = 200;
  
  private final int MAX_SPEED = 200;
  
  private static final double GAIN_CONSTANT = 8;

  public PController() {
    LEFT_MOTOR.setSpeed(MOTOR_SPEED); // Initialize motor rolling forward
    RIGHT_MOTOR.setSpeed(MOTOR_SPEED);
    LEFT_MOTOR.forward();
    RIGHT_MOTOR.forward();
  }

  @Override
  public void processUSData(int distance) {
    filter(distance);

    // TODO: process a movement based on the us distance passed in (P style)

    int error = BAND_CENTER - distance;
    
    float speedDifference;
    float left_speed, right_speed;

    // Move forward if the error is within the threshold
    
    if (Math.abs(error) <= BAND_WIDTH) {
      LEFT_MOTOR.setSpeed(MOTOR_HIGH); 
      RIGHT_MOTOR.setSpeed(MOTOR_HIGH);
      LEFT_MOTOR.forward();
      RIGHT_MOTOR.forward();
    }
    
    // Apply corrections to turn away from the wall if too close
    
    else if (error > 0) {
      if (distance < 10) {
        speedDifference = calculateSpeed(error);
        left_speed = MOTOR_SPEED - speedDifference/5;
        right_speed = MOTOR_SPEED - speedDifference/5;
        LEFT_MOTOR.setSpeed(left_speed); 
        RIGHT_MOTOR.setSpeed(right_speed);
        LEFT_MOTOR.forward();
        RIGHT_MOTOR.backward();
      }
      else {
        speedDifference = calculateSpeed(error);
        left_speed = MOTOR_SPEED + speedDifference;
        right_speed = MOTOR_SPEED - speedDifference/5;
        LEFT_MOTOR.setSpeed(left_speed); 
        RIGHT_MOTOR.setSpeed(right_speed);
        LEFT_MOTOR.forward();
        RIGHT_MOTOR.forward();
      }
    }
    
    // Apply corrections to turn towards the wall if too far
    
    else if (error < 0) {
      speedDifference = calculateSpeed(error);
      right_speed = (float) MOTOR_SPEED + speedDifference * 3/5;
      left_speed = MOTOR_SPEED - speedDifference/5;
      LEFT_MOTOR.setSpeed(left_speed); 
      RIGHT_MOTOR.setSpeed(right_speed);
      LEFT_MOTOR.forward();
      RIGHT_MOTOR.forward();
    }
    
    else if (error < -500) {
      speedDifference = calculateSpeed(error);
      right_speed = MOTOR_SPEED - speedDifference/5;
      left_speed = MOTOR_SPEED - speedDifference/5;
      LEFT_MOTOR.setSpeed(left_speed); 
      RIGHT_MOTOR.setSpeed(right_speed);
      LEFT_MOTOR.forward();
      RIGHT_MOTOR.forward();
    }

  }
  
  private float calculateSpeed(float errorValue) {
    
    int speedCorrection;
    if (errorValue < 0) {
      errorValue = -errorValue;
    }
    
    speedCorrection = (int) (GAIN_CONSTANT * errorValue);
    
    if (speedCorrection > MAX_SPEED) {
      speedCorrection = MAX_SPEED;
    }
    
    return speedCorrection;
    
  }


  @Override
  public int readUSDistance() {
    return this.distance;
  }

}
