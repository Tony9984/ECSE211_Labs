package ca.mcgill.ecse211.lab1;

import static ca.mcgill.ecse211.lab1.Resources.*;

public class PController extends UltrasonicController {

  private static final int MOTOR_SPEED = 200;

  public PController() {
    LEFT_MOTOR.setSpeed(MOTOR_SPEED); // Initialize motor rolling forward
    RIGHT_MOTOR.setSpeed(MOTOR_SPEED);
    LEFT_MOTOR.forward();
    RIGHT_MOTOR.forward();
  }

  @Override
  public void processUSData(int distance) {
    filter(distance);

    // TODO: process a movement based on the us distance passed in (P style)

    // Calculate the gain constant

    int error = Math.abs(BAND_CENTER - distance);
    
    double gain_constant = error > 100 ? error * 0.5 : error * 2;
    
    int low_speed = (int) (MOTOR_LOW - gain_constant);
    
    int high_speed = (int) (MOTOR_LOW + gain_constant);

    // Apply corrections to turn towards the wall if too far

    if (distance > BAND_WIDTH + BAND_CENTER) {
      LEFT_MOTOR.setSpeed((int)(low_speed)); 
      RIGHT_MOTOR.setSpeed((int)(high_speed));
      LEFT_MOTOR.forward();
      RIGHT_MOTOR.forward();
    }

    // Apply corrections to turn away from the wall if too close

    else if (distance < BAND_CENTER - BAND_WIDTH) {
      LEFT_MOTOR.setSpeed((int)(high_speed)); 
      RIGHT_MOTOR.setSpeed((int)(low_speed));
      LEFT_MOTOR.forward();
      RIGHT_MOTOR.backward();
    }

    // Move forward if the error is within the threshold

    else {
      
      LEFT_MOTOR.setSpeed(MOTOR_HIGH); 
      RIGHT_MOTOR.setSpeed(MOTOR_HIGH);
      LEFT_MOTOR.forward();
      RIGHT_MOTOR.forward();

    }

  }


  @Override
  public int readUSDistance() {
    return this.distance;
  }

}
