package ca.mcgill.ecse211.lab2;

import static ca.mcgill.ecse211.lab2.Resources.*;
import lejos.hardware.Sound;
import lejos.hardware.ev3.LocalEV3;
import lejos.hardware.port.Port;
import lejos.hardware.sensor.EV3ColorSensor;
import lejos.hardware.sensor.SensorModes;
import lejos.robotics.SampleProvider;

public class OdometryCorrection implements Runnable {
  private static final long CORRECTION_PERIOD = 10;

  private static final Port colourSampler = LocalEV3.get().getPort("S2");
  private SensorModes colourSamplerSensor = new EV3ColorSensor(colourSampler);
  private SampleProvider colourSensorValue = colourSamplerSensor.getMode("Red");
  private float[] colourSensorValues = new float[colourSamplerSensor.sampleSize()];

  private Odometer odometer;
  
  private float lastValue = 0;

  private int counterStartY = 0;

  private double distanceCorrectionY = 0;

  private int counterX = 1;

  private int counterY = 1;

  private double theta;

  private double initialPosition[];

  /*
   * Here is where the odometer correction code should be run.
   */
  public void run() {
    long correctionStart, correctionEnd;
    
    this.odometer = Odometer.getOdometer();

    while (true) {
      
      correctionStart = System.currentTimeMillis();

      colourSensorValue.fetchSample(colourSensorValues, 0);

      float value = (colourSensorValues[0] * 1000);
      
      float difference = value - lastValue;
      lastValue = value;

      if (difference < -40) {

        Sound.twoBeeps();

        initialPosition = odometer.getXYT();

        theta = initialPosition[2] * 180 / Math.PI;

        // GOING NORTH

        if ((theta >= 330 && theta <= 360) || (theta >= 0 && theta <= 30)) {
          if (counterStartY == 0) {
            distanceCorrectionY = initialPosition[0];
            counterStartY++;
          }
          else {
            odometer.setY(distanceCorrectionY + counterY * TILE_SIZE);
            counterY++;
          }
        }

        // GOING EAST

        else if (theta >= 60 && theta <= 120) {
          odometer.setX(counterX * TILE_SIZE);
          counterX++;
        }

        // GOING SOUTH

        else if (theta >= 150 && theta <= 210) {
          counterY--;
          odometer.setY(TILE_SIZE * counterY + distanceCorrectionY);
        }

        // GOING WEST

        else if (theta >= 240 && theta <= 300) {
          counterX--;
          odometer.setX(TILE_SIZE * counterX);
        }
      }

      // this ensures the odometry correction occurs only once every period
      correctionEnd = System.currentTimeMillis();
      if (correctionEnd - correctionStart < CORRECTION_PERIOD) {
        Main.sleepFor(CORRECTION_PERIOD - (correctionEnd - correctionStart));
      }
    }
  }

}
